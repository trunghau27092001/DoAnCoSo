#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NHOMH2KT_WebCoffee.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CoffeeWeb")]
	public partial class CoffeeDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertTypeAcc(TypeAcc instance);
    partial void UpdateTypeAcc(TypeAcc instance);
    partial void DeleteTypeAcc(TypeAcc instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertOrderData(OrderData instance);
    partial void UpdateOrderData(OrderData instance);
    partial void DeleteOrderData(OrderData instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InserttOrder(tOrder instance);
    partial void UpdatetOrder(tOrder instance);
    partial void DeletetOrder(tOrder instance);
    #endregion
		
		public CoffeeDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CoffeeWebConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoffeeDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<TypeAcc> TypeAccs
		{
			get
			{
				return this.GetTable<TypeAcc>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<OrderData> OrderDatas
		{
			get
			{
				return this.GetTable<OrderData>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<tOrder> tOrders
		{
			get
			{
				return this.GetTable<tOrder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCus;
		
		private string _nameCus;
		
		private string _addressCus;
		
		private string _email;
		
		private string _phoneNum;
		
		private string _username;
		
		private string _password;
		
		private string _avatar;
		
		private string _idType;
		
		private EntitySet<tOrder> _tOrders;
		
		private EntityRef<TypeAcc> _TypeAcc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCusChanging(int value);
    partial void OnidCusChanged();
    partial void OnnameCusChanging(string value);
    partial void OnnameCusChanged();
    partial void OnaddressCusChanging(string value);
    partial void OnaddressCusChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphoneNumChanging(string value);
    partial void OnphoneNumChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    partial void OnidTypeChanging(string value);
    partial void OnidTypeChanged();
    #endregion
		
		public Account()
		{
			this._tOrders = new EntitySet<tOrder>(new Action<tOrder>(this.attach_tOrders), new Action<tOrder>(this.detach_tOrders));
			this._TypeAcc = default(EntityRef<TypeAcc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCus
		{
			get
			{
				return this._idCus;
			}
			set
			{
				if ((this._idCus != value))
				{
					this.OnidCusChanging(value);
					this.SendPropertyChanging();
					this._idCus = value;
					this.SendPropertyChanged("idCus");
					this.OnidCusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameCus", DbType="NVarChar(100)")]
		public string nameCus
		{
			get
			{
				return this._nameCus;
			}
			set
			{
				if ((this._nameCus != value))
				{
					this.OnnameCusChanging(value);
					this.SendPropertyChanging();
					this._nameCus = value;
					this.SendPropertyChanged("nameCus");
					this.OnnameCusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressCus", DbType="NVarChar(100)")]
		public string addressCus
		{
			get
			{
				return this._addressCus;
			}
			set
			{
				if ((this._addressCus != value))
				{
					this.OnaddressCusChanging(value);
					this.SendPropertyChanging();
					this._addressCus = value;
					this.SendPropertyChanged("addressCus");
					this.OnaddressCusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNum", DbType="VarChar(20)")]
		public string phoneNum
		{
			get
			{
				return this._phoneNum;
			}
			set
			{
				if ((this._phoneNum != value))
				{
					this.OnphoneNumChanging(value);
					this.SendPropertyChanging();
					this._phoneNum = value;
					this.SendPropertyChanged("phoneNum");
					this.OnphoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="VarChar(50)")]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", DbType="VarChar(50)")]
		public string idType
		{
			get
			{
				return this._idType;
			}
			set
			{
				if ((this._idType != value))
				{
					if (this._TypeAcc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTypeChanging(value);
					this.SendPropertyChanging();
					this._idType = value;
					this.SendPropertyChanged("idType");
					this.OnidTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_tOrder", Storage="_tOrders", ThisKey="idCus", OtherKey="idCus")]
		public EntitySet<tOrder> tOrders
		{
			get
			{
				return this._tOrders;
			}
			set
			{
				this._tOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeAcc_Account", Storage="_TypeAcc", ThisKey="idType", OtherKey="idType", IsForeignKey=true)]
		public TypeAcc TypeAcc
		{
			get
			{
				return this._TypeAcc.Entity;
			}
			set
			{
				TypeAcc previousValue = this._TypeAcc.Entity;
				if (((previousValue != value) 
							|| (this._TypeAcc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeAcc.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._TypeAcc.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._idType = value.idType;
					}
					else
					{
						this._idType = default(string);
					}
					this.SendPropertyChanged("TypeAcc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_tOrders(tOrder entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeAcc")]
	public partial class TypeAcc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _idType;
		
		private string _nameType;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTypeChanging(string value);
    partial void OnidTypeChanged();
    partial void OnnameTypeChanging(string value);
    partial void OnnameTypeChanged();
    #endregion
		
		public TypeAcc()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string idType
		{
			get
			{
				return this._idType;
			}
			set
			{
				if ((this._idType != value))
				{
					this.OnidTypeChanging(value);
					this.SendPropertyChanging();
					this._idType = value;
					this.SendPropertyChanged("idType");
					this.OnidTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameType", DbType="NVarChar(50)")]
		public string nameType
		{
			get
			{
				return this._nameType;
			}
			set
			{
				if ((this._nameType != value))
				{
					this.OnnameTypeChanging(value);
					this.SendPropertyChanging();
					this._nameType = value;
					this.SendPropertyChanged("nameType");
					this.OnnameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeAcc_Account", Storage="_Accounts", ThisKey="idType", OtherKey="idType")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.TypeAcc = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.TypeAcc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _idCate;
		
		private string _nameCate;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCateChanging(string value);
    partial void OnidCateChanged();
    partial void OnnameCateChanging(string value);
    partial void OnnameCateChanged();
    #endregion
		
		public Category()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCate", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string idCate
		{
			get
			{
				return this._idCate;
			}
			set
			{
				if ((this._idCate != value))
				{
					this.OnidCateChanging(value);
					this.SendPropertyChanging();
					this._idCate = value;
					this.SendPropertyChanged("idCate");
					this.OnidCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameCate", DbType="NVarChar(50)")]
		public string nameCate
		{
			get
			{
				return this._nameCate;
			}
			set
			{
				if ((this._nameCate != value))
				{
					this.OnnameCateChanging(value);
					this.SendPropertyChanging();
					this._nameCate = value;
					this.SendPropertyChanged("nameCate");
					this.OnnameCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="idCate", OtherKey="idCate")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderData")]
	public partial class OrderData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOrder;
		
		private string _idProd;
		
		private System.Nullable<int> _amount;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<tOrder> _tOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOrderChanging(int value);
    partial void OnidOrderChanged();
    partial void OnidProdChanging(string value);
    partial void OnidProdChanged();
    partial void OnamountChanging(System.Nullable<int> value);
    partial void OnamountChanged();
    #endregion
		
		public OrderData()
		{
			this._Product = default(EntityRef<Product>);
			this._tOrder = default(EntityRef<tOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrder", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idOrder
		{
			get
			{
				return this._idOrder;
			}
			set
			{
				if ((this._idOrder != value))
				{
					if (this._tOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOrderChanging(value);
					this.SendPropertyChanging();
					this._idOrder = value;
					this.SendPropertyChanged("idOrder");
					this.OnidOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProd", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string idProd
		{
			get
			{
				return this._idProd;
			}
			set
			{
				if ((this._idProd != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidProdChanging(value);
					this.SendPropertyChanging();
					this._idProd = value;
					this.SendPropertyChanged("idProd");
					this.OnidProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int")]
		public System.Nullable<int> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderData", Storage="_Product", ThisKey="idProd", OtherKey="idProd", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderDatas.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderDatas.Add(this);
						this._idProd = value.idProd;
					}
					else
					{
						this._idProd = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tOrder_OrderData", Storage="_tOrder", ThisKey="idOrder", OtherKey="idOrder", IsForeignKey=true)]
		public tOrder tOrder
		{
			get
			{
				return this._tOrder.Entity;
			}
			set
			{
				tOrder previousValue = this._tOrder.Entity;
				if (((previousValue != value) 
							|| (this._tOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tOrder.Entity = null;
						previousValue.OrderDatas.Remove(this);
					}
					this._tOrder.Entity = value;
					if ((value != null))
					{
						value.OrderDatas.Add(this);
						this._idOrder = value.idOrder;
					}
					else
					{
						this._idOrder = default(int);
					}
					this.SendPropertyChanged("tOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _idProd;
		
		private string _nameProd;
		
		private System.Nullable<int> _price;
		
		private string _decription;
		
		private string _idCate;
		
		private System.Nullable<int> _soluongKho;
		
		private string _images;
		
		private EntitySet<OrderData> _OrderDatas;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidProdChanging(string value);
    partial void OnidProdChanged();
    partial void OnnameProdChanging(string value);
    partial void OnnameProdChanged();
    partial void OnpriceChanging(System.Nullable<int> value);
    partial void OnpriceChanged();
    partial void OndecriptionChanging(string value);
    partial void OndecriptionChanged();
    partial void OnidCateChanging(string value);
    partial void OnidCateChanged();
    partial void OnsoluongKhoChanging(System.Nullable<int> value);
    partial void OnsoluongKhoChanged();
    partial void OnimagesChanging(string value);
    partial void OnimagesChanged();
    #endregion
		
		public Product()
		{
			this._OrderDatas = new EntitySet<OrderData>(new Action<OrderData>(this.attach_OrderDatas), new Action<OrderData>(this.detach_OrderDatas));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProd", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string idProd
		{
			get
			{
				return this._idProd;
			}
			set
			{
				if ((this._idProd != value))
				{
					this.OnidProdChanging(value);
					this.SendPropertyChanging();
					this._idProd = value;
					this.SendPropertyChanged("idProd");
					this.OnidProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameProd", DbType="NVarChar(50)")]
		public string nameProd
		{
			get
			{
				return this._nameProd;
			}
			set
			{
				if ((this._nameProd != value))
				{
					this.OnnameProdChanging(value);
					this.SendPropertyChanging();
					this._nameProd = value;
					this.SendPropertyChanged("nameProd");
					this.OnnameProdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int")]
		public System.Nullable<int> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_decription", DbType="NVarChar(200)")]
		public string decription
		{
			get
			{
				return this._decription;
			}
			set
			{
				if ((this._decription != value))
				{
					this.OndecriptionChanging(value);
					this.SendPropertyChanging();
					this._decription = value;
					this.SendPropertyChanged("decription");
					this.OndecriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCate", DbType="VarChar(20)")]
		public string idCate
		{
			get
			{
				return this._idCate;
			}
			set
			{
				if ((this._idCate != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCateChanging(value);
					this.SendPropertyChanging();
					this._idCate = value;
					this.SendPropertyChanged("idCate");
					this.OnidCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_soluongKho", DbType="Int")]
		public System.Nullable<int> soluongKho
		{
			get
			{
				return this._soluongKho;
			}
			set
			{
				if ((this._soluongKho != value))
				{
					this.OnsoluongKhoChanging(value);
					this.SendPropertyChanging();
					this._soluongKho = value;
					this.SendPropertyChanged("soluongKho");
					this.OnsoluongKhoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_images", DbType="VarChar(50)")]
		public string images
		{
			get
			{
				return this._images;
			}
			set
			{
				if ((this._images != value))
				{
					this.OnimagesChanging(value);
					this.SendPropertyChanging();
					this._images = value;
					this.SendPropertyChanged("images");
					this.OnimagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderData", Storage="_OrderDatas", ThisKey="idProd", OtherKey="idProd")]
		public EntitySet<OrderData> OrderDatas
		{
			get
			{
				return this._OrderDatas;
			}
			set
			{
				this._OrderDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="idCate", OtherKey="idCate", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._idCate = value.idCate;
					}
					else
					{
						this._idCate = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDatas(OrderData entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderDatas(OrderData entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tOrder")]
	public partial class tOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOrder;
		
		private System.Nullable<int> _idCus;
		
		private System.Nullable<bool> _payment;
		
		private System.Nullable<bool> _status;
		
		private System.Nullable<System.DateTime> _dateOrder;
		
		private System.Nullable<System.DateTime> _dateDeli;
		
		private EntitySet<OrderData> _OrderDatas;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOrderChanging(int value);
    partial void OnidOrderChanged();
    partial void OnidCusChanging(System.Nullable<int> value);
    partial void OnidCusChanged();
    partial void OnpaymentChanging(System.Nullable<bool> value);
    partial void OnpaymentChanged();
    partial void OnstatusChanging(System.Nullable<bool> value);
    partial void OnstatusChanged();
    partial void OndateOrderChanging(System.Nullable<System.DateTime> value);
    partial void OndateOrderChanged();
    partial void OndateDeliChanging(System.Nullable<System.DateTime> value);
    partial void OndateDeliChanged();
    #endregion
		
		public tOrder()
		{
			this._OrderDatas = new EntitySet<OrderData>(new Action<OrderData>(this.attach_OrderDatas), new Action<OrderData>(this.detach_OrderDatas));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrder", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idOrder
		{
			get
			{
				return this._idOrder;
			}
			set
			{
				if ((this._idOrder != value))
				{
					this.OnidOrderChanging(value);
					this.SendPropertyChanging();
					this._idOrder = value;
					this.SendPropertyChanged("idOrder");
					this.OnidOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCus", DbType="Int")]
		public System.Nullable<int> idCus
		{
			get
			{
				return this._idCus;
			}
			set
			{
				if ((this._idCus != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCusChanging(value);
					this.SendPropertyChanging();
					this._idCus = value;
					this.SendPropertyChanged("idCus");
					this.OnidCusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment", DbType="Bit")]
		public System.Nullable<bool> payment
		{
			get
			{
				return this._payment;
			}
			set
			{
				if ((this._payment != value))
				{
					this.OnpaymentChanging(value);
					this.SendPropertyChanging();
					this._payment = value;
					this.SendPropertyChanged("payment");
					this.OnpaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit")]
		public System.Nullable<bool> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOrder", DbType="Date")]
		public System.Nullable<System.DateTime> dateOrder
		{
			get
			{
				return this._dateOrder;
			}
			set
			{
				if ((this._dateOrder != value))
				{
					this.OndateOrderChanging(value);
					this.SendPropertyChanging();
					this._dateOrder = value;
					this.SendPropertyChanged("dateOrder");
					this.OndateOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateDeli", DbType="Date")]
		public System.Nullable<System.DateTime> dateDeli
		{
			get
			{
				return this._dateDeli;
			}
			set
			{
				if ((this._dateDeli != value))
				{
					this.OndateDeliChanging(value);
					this.SendPropertyChanging();
					this._dateDeli = value;
					this.SendPropertyChanged("dateDeli");
					this.OndateDeliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tOrder_OrderData", Storage="_OrderDatas", ThisKey="idOrder", OtherKey="idOrder")]
		public EntitySet<OrderData> OrderDatas
		{
			get
			{
				return this._OrderDatas;
			}
			set
			{
				this._OrderDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_tOrder", Storage="_Account", ThisKey="idCus", OtherKey="idCus", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.tOrders.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.tOrders.Add(this);
						this._idCus = value.idCus;
					}
					else
					{
						this._idCus = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDatas(OrderData entity)
		{
			this.SendPropertyChanging();
			entity.tOrder = this;
		}
		
		private void detach_OrderDatas(OrderData entity)
		{
			this.SendPropertyChanging();
			entity.tOrder = null;
		}
	}
}
#pragma warning restore 1591
